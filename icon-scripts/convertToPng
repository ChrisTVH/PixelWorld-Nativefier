#!/usr/bin/env bash

# Uso

# ./convertToPng <input png or ico> <outfilename>.png
# Ejemplo
# ./convertToPng ~/sample.ico ~/Desktop/converted.png

set -e

type convert >/dev/null 2>&1 || { echo >&2 "No se puede encontrar el ejecutable 'convertir' de ImageMagick requerido, instálelo y asegúrese de que esté en su RUTA"; exit 1; }
type identify >/dev/null 2>&1 || { echo >&2 "No se puede encontrar el ejecutable de 'identificación' de ImageMagick requerido, instálelo y asegúrese de que esté en su RUTA"; exit 1; }

# Parametros
SOURCE="$1"
DEST="$2"

# Verifique los argumentos de origen y destino
if [ -z "${SOURCE}" ]; then
	echo "No se ha especificado ninguna imagen de origen"
	exit 1
fi

if [ -z "${DEST}" ]; then
	echo "Sin destino especificado"
	exit 1
fi

# Infraestructura de archivos
NAME=$(basename "${SOURCE}")
BASE="${NAME%.*}"
TEMP_DIR="convert_temp"

function cleanUp() {
    rm -rf "${TEMP_DIR}"
}

trap cleanUp EXIT

mkdir -p "${TEMP_DIR}"

# comprobar si .ico es una secuencia
# pipe into cat, por lo que no se proporciona un código de salida para grep si no se encuentran coincidencias
IS_ICO_SET="$(identify "${SOURCE}" | grep -e "\w\.ico\[0" | cat )"

convert "${SOURCE}" "${TEMP_DIR}/${BASE}.png"
if [ "${IS_ICO_SET}" ]; then
	# extraer la imagen más grande (?) del conjunto
    cp "${TEMP_DIR}/${BASE}-0.png" "${DEST}"
else
    cp "${TEMP_DIR}/${BASE}.png" "${DEST}"
fi

rm -rf "${TEMP_DIR}"

trap - EXIT
cleanUp
